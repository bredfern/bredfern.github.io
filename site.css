
* {
    box-sizing: border-box;
}


html { 
    min-height: 100%;
    padding: 0;
    margin: 0; 
    font-family: "Avenir Next", "Avenir", sans-serif; 
}

body {
    background: #b9e192; 
    color: #000;
    padding: 0;
    margin: 0;
    width: 100%;
}

#content {
    max-width: 20rem;
    margin-left: auto;
    margin-right: auto;
}

a,
a:visited,
a:active {
	color: #000;
    text-decoration: underline;
}

#logo {
	width: 18.75rem;
    height: 16.125rem;
	border: none;
}

a:hover {
	font-weight: bold;
}

.container {
	width: 100%;
	min-height: 100vh;
}

.icon {
	margin-right: 0.25rem;
	width: 1.875rem;
	height: 1.875rem;
}

.no-decor {
	text-decoration: none;
}

h1 {
	font-size: 2rem;
	display: inline;
}

header {
    	background-color: #029356;
    	color: #000;
    	padding: 0.25rem;
    	height: auto;
    	width: 100%;
}

nav {
	position: absolute;
	right:  0.25rem;
	top: 0.5rem;
	left: auto;
}


footer {
    padding: 0.6rem;
    margin: 0;
    bottom: 0;
    width: 100%;
    background-color: #029356;
    color: #000;
    text-align: center;
    position:absolute;
}

@media (max-width: 48rem) {
    
    #content {
	width: 100%;
    }
}

@property --a { /* must register --a to animate it */
	syntax: '<angle>';
	initial-value: 0deg;
	/* used only on pseudo, nowhere to be inherited, 
	 * better perf if set false, see 
	 * https://www.bram.us/2024/10/03/benchmarking-the-performance-of-css-property/ */
	inherits: false
}

.card {
	margin-top: 2rem;
	/* hide outer part of glow */
	overflow: hidden;
	/* needed for absolutely positioned pseudo */
	position: relative;
	/* adjust width as needed IF it's even necessary to set */
	width: Min(10.5em, 80vmin);
	/* adjust aspect-ratio OR height IF height not given by content */
	aspect-ratio: 1;
	/* round outer card corners */
	border-radius: .5em;
	
	/* text & layout styles below just for prettifying */
	place-self: center;
	place-content: center;
	padding: .5em;
	color: #ededed;
	font: clamp(0.25em, 2vw + 2vh, 2em) sans-serif;
	text-align: center;
	text-transform: uppercase;
	text-wrap: balance
}

.card::before {
	/* grid doesn't work for stacking when a stacked item is text node */
	position: absolute;
	/* place behind card content, so card text is selectable, etc */
	z-index: -1;
	/* best if inset is at least half the border-width with minus */
	inset: -1em;
	/* reserve space for border */
	border: solid 1.25em;
	border-image: 
		/* adjust gradient as needed, I just used a random palette */
		conic-gradient(from var(--a), #669900, #000000, #7dee66, 
				#00993b, #224b00, #027408, #f0f7f000, 
				#8cff7d, #116805, #1eff00, #000000) 1;
	/* blur this pseudo */
	filter: blur(.75em);
	/* tweak animation duration as necessary */
	animation: a 4s linear infinite;
	/* needed so pseudo is displayed */
	content: ''
}

/* animate --a from its initial-value 0deg to 1turn */
@keyframes a { to { --a: 1turn } }



